<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/LOGGING.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LOGGING.md" />
              <option name="updatedContent" value="# 日志系统文档&#10;&#10;## 概述&#10;&#10;本项目已集成完善的结构化日志系统，基于 `logrus` 库实现。日志系统提供以下特性：&#10;&#10;- 结构化日志记录&#10;- 多级别日志支持&#10;- 文件和控制台双输出&#10;- 用户操作追踪&#10;- API调用监控&#10;- 错误详细记录&#10;&#10;## 配置&#10;&#10;在 `config.yaml` 中添加日志配置：&#10;&#10;```yaml&#10;logging:&#10;  level: &quot;info&quot;               # 日志级别: debug, info, warn, error, fatal&#10;  to_file: true              # 是否输出到文件&#10;  file_path: &quot;logs/bot.log&quot;  # 日志文件路径&#10;```&#10;&#10;## 日志级别&#10;&#10;- **debug**: 调试信息，包含详细的程序执行流程&#10;- **info**: 一般信息，记录正常的操作流程&#10;- **warn**: 警告信息，记录可能的问题但不影响正常运行&#10;- **error**: 错误信息，记录程序错误但不会退出&#10;- **fatal**: 致命错误，记录后程序将退出&#10;&#10;## 日志格式&#10;&#10;日志采用结构化格式，包含以下字段：&#10;- 时间戳&#10;- 日志级别&#10;- 文件名和行号&#10;- 用户ID（如果相关）&#10;- 组件名&#10;- 具体日志内容&#10;- 附加字段&#10;&#10;示例：&#10;```&#10;2024-01-15 14:30:25 INFO [handlers.go:45] 用户操作 component=bot user_id=123456789 action=start_command&#10;```&#10;&#10;## 主要日志类型&#10;&#10;### 1. 用户操作日志&#10;记录所有用户与机器人的交互：&#10;```go&#10;logger.LogUserAction(userID, username, &quot;upload_image&quot;, map[string]interface{}{&#10;    &quot;file_size&quot;: 1024000,&#10;    &quot;format&quot;: &quot;jpeg&quot;,&#10;})&#10;```&#10;&#10;### 2. 文件上传日志&#10;详细记录文件上传过程：&#10;```go&#10;logger.LogUploadAction(userID, username, filename, fileSize, success, errorMsg)&#10;```&#10;&#10;### 3. API调用日志&#10;监控外部API调用：&#10;```go&#10;logger.LogAPICall(&quot;cloudflare&quot;, &quot;POST&quot;, url, statusCode, duration, err)&#10;```&#10;&#10;### 4. 系统事件日志&#10;记录系统级别的事件：&#10;```go&#10;logger.LogSystemEvent(&quot;bot_startup&quot;, map[string]interface{}{&#10;    &quot;version&quot;: &quot;1.0.0&quot;,&#10;})&#10;```&#10;&#10;## 组件标识&#10;&#10;不同模块使用不同的组件标识：&#10;- `bot`: 机器人核心功能&#10;- `validator`: 图片验证模块&#10;- `cloudflare`: Cloudflare API交互&#10;- `config`: 配置管理&#10;- `auth`: 权限管理&#10;&#10;## 错误处理&#10;&#10;日志系统提供统一的错误处理：&#10;&#10;```go&#10;// 记录错误并返回&#10;return logger.LogError(err, &quot;操作失败&quot;)&#10;&#10;// 记录错误日志并返回新错误&#10;return logger.LogAndReturnError(&quot;配置无效: %s&quot;, configPath)&#10;```&#10;&#10;## 使用示例&#10;&#10;### 基本日志记录&#10;```go&#10;logger.Info(&quot;机器人启动成功&quot;)&#10;logger.Error(&quot;配置文件读取失败: %v&quot;, err)&#10;```&#10;&#10;### 带字段的日志&#10;```go&#10;logger.WithFields(map[string]interface{}{&#10;    &quot;user_id&quot;: 123456,&#10;    &quot;action&quot;: &quot;upload&quot;,&#10;}).Info(&quot;用户操作&quot;)&#10;```&#10;&#10;### 按组件记录&#10;```go&#10;logger.WithComponent(&quot;validator&quot;).Info(&quot;开始验证图片&quot;)&#10;```&#10;&#10;### 按用户记录&#10;```go&#10;logger.WithUserID(userID).Warn(&quot;用户权限不足&quot;)&#10;```&#10;&#10;## 日志轮转&#10;&#10;建议配合日志轮转工具使用，如 `logrotate`（Linux）或定期清理脚本，避免日志文件过大。&#10;&#10;## 监控建议&#10;&#10;1. 监控错误日志数量，及时发现问题&#10;2. 分析用户操作日志，了解使用模式&#10;3. 跟踪API调用性能，优化响应时间&#10;4. 定期检查磁盘空间，避免日志文件占满磁盘&#10;&#10;## 隐私保护&#10;&#10;日志系统自动过滤敏感信息：&#10;- API密钥在URL中会被隐藏&#10;- 用户个人信息只记录必要字段&#10;- 文件内容不会被记录&#10;&#10;## 性能影响&#10;&#10;结构化日志系统对性能影响很小：&#10;- 异步写入减少阻塞&#10;- 合理的日志级别控制输出量&#10;- 高效的序列化避免性能损耗" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test.html" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;zh-CN&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;图片上传测试&lt;/title&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            font-family: Arial, sans-serif;&#10;            max-width: 800px;&#10;            margin: 50px auto;&#10;            padding: 20px;&#10;            background-color: #f5f5f5;&#10;        }&#10;        .container {&#10;            background: white;&#10;            padding: 30px;&#10;            border-radius: 10px;&#10;            box-shadow: 0 2px 10px rgba(0,0,0,0.1);&#10;        }&#10;        .upload-area {&#10;            border: 2px dashed #ccc;&#10;            border-radius: 10px;&#10;            padding: 40px;&#10;            text-align: center;&#10;            margin: 20px 0;&#10;            transition: all 0.3s ease;&#10;        }&#10;        .upload-area:hover {&#10;            border-color: #007bff;&#10;            background-color: #f8f9ff;&#10;        }&#10;        .upload-area.dragover {&#10;            border-color: #007bff;&#10;            background-color: #e3f2fd;&#10;        }&#10;        input[type=&quot;file&quot;] {&#10;            margin: 20px 0;&#10;        }&#10;        button {&#10;            background-color: #007bff;&#10;            color: white;&#10;            border: none;&#10;            padding: 10px 20px;&#10;            border-radius: 5px;&#10;            cursor: pointer;&#10;            font-size: 16px;&#10;        }&#10;        button:hover {&#10;            background-color: #0056b3;&#10;        }&#10;        button:disabled {&#10;            background-color: #ccc;&#10;            cursor: not-allowed;&#10;        }&#10;        .result {&#10;            margin-top: 20px;&#10;            padding: 15px;&#10;            border-radius: 5px;&#10;        }&#10;        .success {&#10;            background-color: #d4edda;&#10;            border: 1px solid #c3e6cb;&#10;            color: #155724;&#10;        }&#10;        .error {&#10;            background-color: #f8d7da;&#10;            border: 1px solid #f5c6cb;&#10;            color: #721c24;&#10;        }&#10;        .info {&#10;            background-color: #d1ecf1;&#10;            border: 1px solid #bee5eb;&#10;            color: #0c5460;&#10;        }&#10;        .stats {&#10;            display: flex;&#10;            justify-content: space-between;&#10;            margin-top: 20px;&#10;        }&#10;        .stat-item {&#10;            text-align: center;&#10;            padding: 10px;&#10;            background-color: #f8f9fa;&#10;            border-radius: 5px;&#10;        }&#10;        .progress {&#10;            width: 100%;&#10;            height: 20px;&#10;            background-color: #e9ecef;&#10;            border-radius: 10px;&#10;            overflow: hidden;&#10;            margin: 10px 0;&#10;        }&#10;        .progress-bar {&#10;            height: 100%;&#10;            background-color: #28a745;&#10;            transition: width 0.3s ease;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;h1&gt;安全图片上传测试&lt;/h1&gt;&#10;        &#10;        &lt;div class=&quot;upload-area&quot; id=&quot;uploadArea&quot;&gt;&#10;            &lt;p&gt;拖拽图片到此处或点击选择文件&lt;/p&gt;&#10;            &lt;input type=&quot;file&quot; id=&quot;fileInput&quot; accept=&quot;image/*&quot; multiple&gt;&#10;            &lt;button type=&quot;button&quot; onclick=&quot;uploadFiles()&quot;&gt;上传图片&lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;progress&quot; id=&quot;progressContainer&quot; style=&quot;display:none;&quot;&gt;&#10;            &lt;div class=&quot;progress-bar&quot; id=&quot;progressBar&quot; style=&quot;width:0%&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div id=&quot;result&quot;&gt;&lt;/div&gt;&#10;&#10;        &lt;div class=&quot;stats&quot;&gt;&#10;            &lt;div class=&quot;stat-item&quot;&gt;&#10;                &lt;h3&gt;总上传次数&lt;/h3&gt;&#10;                &lt;span id=&quot;totalUploads&quot;&gt;0&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;stat-item&quot;&gt;&#10;                &lt;h3&gt;成功上传&lt;/h3&gt;&#10;                &lt;span id=&quot;successUploads&quot;&gt;0&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;stat-item&quot;&gt;&#10;                &lt;h3&gt;失败上传&lt;/h3&gt;&#10;                &lt;span id=&quot;failedUploads&quot;&gt;0&lt;/span&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;button onclick=&quot;loadStats()&quot; style=&quot;margin-top: 20px;&quot;&gt;刷新统计&lt;/button&gt;&#10;        &lt;button onclick=&quot;checkHealth()&quot; style=&quot;margin-left: 10px;&quot;&gt;检查服务状态&lt;/button&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        const uploadArea = document.getElementById('uploadArea');&#10;        const fileInput = document.getElementById('fileInput');&#10;        const result = document.getElementById('result');&#10;        const progressContainer = document.getElementById('progressContainer');&#10;        const progressBar = document.getElementById('progressBar');&#10;&#10;        // 点击上传区域选择文件&#10;        uploadArea.addEventListener('click', () =&gt; {&#10;            if (event.target !== fileInput) {&#10;                fileInput.click();&#10;            }&#10;        });&#10;&#10;        // 拖拽事件处理&#10;        uploadArea.addEventListener('dragover', (e) =&gt; {&#10;            e.preventDefault();&#10;            uploadArea.classList.add('dragover');&#10;        });&#10;&#10;        uploadArea.addEventListener('dragleave', () =&gt; {&#10;            uploadArea.classList.remove('dragover');&#10;        });&#10;&#10;        uploadArea.addEventListener('drop', (e) =&gt; {&#10;            e.preventDefault();&#10;            uploadArea.classList.remove('dragover');&#10;            fileInput.files = e.dataTransfer.files;&#10;        });&#10;&#10;        // 上传文件函数&#10;        async function uploadFiles() {&#10;            const files = fileInput.files;&#10;            if (files.length === 0) {&#10;                showResult('请选择要上传的图片文件', 'error');&#10;                return;&#10;            }&#10;&#10;            progressContainer.style.display = 'block';&#10;            result.innerHTML = '';&#10;&#10;            for (let i = 0; i &lt; files.length; i++) {&#10;                const file = files[i];&#10;                const progress = ((i + 1) / files.length) * 100;&#10;                progressBar.style.width = progress + '%';&#10;&#10;                await uploadSingleFile(file);&#10;            }&#10;&#10;            progressContainer.style.display = 'none';&#10;            loadStats(); // 刷新统计&#10;        }&#10;&#10;        // 上传单个文件&#10;        async function uploadSingleFile(file) {&#10;            const formData = new FormData();&#10;            formData.append('image', file);&#10;&#10;            try {&#10;                const response = await fetch('/upload', {&#10;                    method: 'POST',&#10;                    body: formData&#10;                });&#10;&#10;                const data = await response.json();&#10;                &#10;                if (data.success) {&#10;                    showResult(`✅ 上传成功: ${data.filename} (${formatFileSize(data.size)})`, 'success');&#10;                } else {&#10;                    showResult(`❌ 上传失败: ${data.message}`, 'error');&#10;                }&#10;            } catch (error) {&#10;                showResult(`❌ 网络错误: ${error.message}`, 'error');&#10;            }&#10;        }&#10;&#10;        // 显示结果&#10;        function showResult(message, type) {&#10;            const resultDiv = document.createElement('div');&#10;            resultDiv.className = `result ${type}`;&#10;            resultDiv.innerHTML = message;&#10;            result.appendChild(resultDiv);&#10;        }&#10;&#10;        // 格式化文件大小&#10;        function formatFileSize(bytes) {&#10;            if (bytes === 0) return '0 Bytes';&#10;            const k = 1024;&#10;            const sizes = ['Bytes', 'KB', 'MB', 'GB'];&#10;            const i = Math.floor(Math.log(bytes) / Math.log(k));&#10;            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];&#10;        }&#10;&#10;        // 加载统计信息&#10;        async function loadStats() {&#10;            try {&#10;                const response = await fetch('/stats');&#10;                const data = await response.json();&#10;                &#10;                document.getElementById('totalUploads').textContent = data.total_uploads;&#10;                document.getElementById('successUploads').textContent = data.success_uploads;&#10;                document.getElementById('failedUploads').textContent = data.failed_uploads;&#10;            } catch (error) {&#10;                showResult(`获取统计信息失败: ${error.message}`, 'error');&#10;            }&#10;        }&#10;&#10;        // 检查服务健康状态&#10;        async function checkHealth() {&#10;            try {&#10;                const response = await fetch('/health');&#10;                const data = await response.json();&#10;                &#10;                if (data.status === 'healthy') {&#10;                    showResult(`✅ 服务状态正常: ${data.service}`, 'success');&#10;                } else {&#10;                    showResult(`⚠️ 服务状态异常`, 'error');&#10;                }&#10;            } catch (error) {&#10;                showResult(`❌ 无法连接到服务器: ${error.message}`, 'error');&#10;            }&#10;        }&#10;&#10;        // 页面加载时获取统计信息&#10;        window.onload = () =&gt; {&#10;            loadStats();&#10;            checkHealth();&#10;        };&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>